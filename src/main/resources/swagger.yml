openapi: "3.0.3"
info:
  title: "DK KTOR StarterPack"
  description: "Kotlin KTOR StarterPack for API with some example endpoints"
  version: "1.0.0"
servers:
  - url: "http://0.0.0.0:8080"
  - url: "http://localhost"
  - url: "http://localhost:3000"
paths:
  /:
    get:
      summary: "Get API info"
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                type: object
  /metrics:
    get:
      summary: "Get Metrics"
      responses:
        200:
          description: "OK"
          content:
            text/plain:
  /health:
    get:
      summary: "Get Health"
      responses:
        200:
          description: "OK"
          content:
            text/plain:
            application/json:
              schema:
                type: object
  /v1/articles:
    get:
      summary: "Get all article"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
            schema:
              $ref: "#/components/schemas/ArticleCollection"
    post:
      description: "Creates a new article"
      requestBody:
        description: "A JSON object containing article information"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ArticleCreate"
      responses:
        "201":
          description: "Created"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ArticleCreate"
        "420":
          description: "Validation Error"
          content:
              application/json:
              schema:
                  $ref: "#/components/schemas/ValidationError"
        "409":
          description: "Duplicate"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /articles/{id}:
    get:
      description: "Returns a article by its ID"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "OK"
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/Article"
        "404":
          description: "Not Found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      description: "Updates a article by its ID"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
      requestBody:
        description: "A JSON object containing article information"
        required: true
        content:
        application/json:
          schema:
          $ref: "#/components/schemas/ArticleUpdate"
      responses:
        "200":
        description: "OK"
        content:
          application/json:
          schema:
            $ref: "#/components/schemas/Article"
        "404":
          description: "Not Found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "420":
          description: "Validation Error"
          content:
            application/json:
            schema:
              $ref: "#/components/schemas/ValidationError"
    delete:
      description: "Deletes a article by its ID"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "204":
          description: "OK - (No Content)"
  /articles/{id}/rate/{rating}:
    post:
      description: "Rate a article by its ID"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "rating"
          in: "path"
          required: true
          schema:
            type: "integer"
            minimum: 1
            maximum: 5
            example: 3
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Article"
        "404":
          description: "Not Found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "420":
          description: "Validation Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationError"
  /swagger:
    get:
      summary: "Get Swagger UI"
      responses:
        200:
          description: "OK"
          content:
            "text/html"
  /swagger.yml:
    get:
      summary: "Get Swagger specification file"
      responses:
        200:
          description: "OK"
          content:
            application/yaml:
              schema:
                type: object
components:
  schemas:
    Error:
      type: object
      required:
        - errorMessage, status
      properties:
        errorMessage:
          type: string
          example: "404 Not Found"
        status:
          type: integer
          example: 404
    ValidationError:
      type: object
      required:
        - errorMessage, status, validationErrors
      properties:
        errorMessage:
          type: string
          example: "420 Unprocessable Entity"
        status:
          type: integer
          example: 420
        validationErrors:
          type: array
          items:
            type: object
            properties:
              field:
                type: string
              code:
                type: string
                example: "REQUIRED"
              message:
                type: string
    DateTime:
      type: string
      format: date-time
      example: "2019-01-01T00:00:00.000Z"
    ArticleStatus:
      type: string
      enum:
        - "DRAFT"
        - "PUBLISHED"
        - "HIDDEN"
        - "DELETED"
      example: "PUBLISHED"
    Article:
      type: "object"
      required: [ "id", "title", "text","createdAt","rating","rateCount","status" ]
      properties:
        id:
          type: "string"
        title:
          type: "string"
        text:
          type: "string"
        createdAt:
          $ref: "#/components/schemas/DateTime"
        rating:
          type: "float"
          minimum: 0
          maximum: 5
          example: 1
        rateCount:
          type: "integer"
          minimum: 0
          example: 1
        status:
          $ref: "#/components/schemas/ArticleStatus"
    ArticleCollection:
      type: "object"
      required: [ items, hits ]
      properties:
        items:
          type: "array"
          items:
            $ref: "#/components/schemas/Article"
        hits:
          type: "integer"
    ArticleCreate:
      type: "object"
      required: [ "title", "text" ,"status" ]
      properties:
        title:
          type: "string"
        text:
          type: "string"
        status:
          $ref: "#/components/schemas/ArticleStatus"
    ArticleUpdate:
      $ref: "#/components/schemas/ArticleCreate"